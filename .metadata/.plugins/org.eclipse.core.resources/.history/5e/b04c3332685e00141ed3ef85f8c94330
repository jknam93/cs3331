import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Random;
import java.awt.Point;
/**
 * @author jkna499
 *
 */
public class Network {
    public Network(){
    	this.g = new HashMap<Point, Node<Point>>();

    }
	@Override
	public boolean addNode(Point node) {
		
		if(g.containsKey(node)){
		   return false;
		}
		Node<Point> n = new Node<Point>(node);
	    g.put(node, n);
		return true;
	}
	@Override
	public boolean addEdge(Point from, Point to, int weight) {

		if(g.containsKey(from) && g.containsKey(to)){
			g.get(from).add(to, weight);
			g.get(to).add(from, weight);
			return true;
		}
		return false;
	}
	@Override
	public boolean removeEdge(Point from, Point to) {
		if(!g.containsKey(from) || g.containsKey(to)){
			return false;
		}
		if(!this.hasEdge(from, to)){
			return false;
		}

		g.get(from).remove(to);
		return g.get(to).remove(from);
	}
	@Override
	public boolean hasNode(Point node) {
		return g.containsKey(node);
	}

	public boolean hasEdge(Point from, Point to) {
		if(!g.containsKey(from) || !g.containsKey(to)){
			return false;
		}
		return g.get(from).contains(to);
	}
	public int getDegree(Point node) {
		return g.get(node).size();
	}
	public boolean isEmpty() {
		return g.size() == 0;
	}
	public void clear() {
		g.clear();

	}
	public List<Point> getNodes() {
		return new LinkedList<Point>(g.keySet());
	}
	public List<Point> getNeighbours(Point node) {
		return new ArrayList<Point>(g.get(node).edgeList());
	}
	public boolean isConnected(Point from, Point to) {
		if(!this.hasNode(from) || !this.hasNode(to)){
			return false;
		}
		LinkedList<Point> open = new LinkedList<Point>();
		LinkedList<Point> close = new LinkedList<Point>();
		open.add(from);
		Point head;
		while(!open.isEmpty()){
			head = open.poll();
			close.add(head);
			if(head.equals(to)){
				return true;
			}
			for(Point e: this.getNeighbours(head)){
				if(!close.contains(e)){
					open.addFirst(e);
				}
			}
		}
		
		return false;
	}

	private HashMap<Point, Node<Point>> g;
}
