import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Random;
import java.awt.Point;
/**
 * @author jkna499
 *
 */
public class Maze {
    public Maze(int width, int height){
    	this.g = new HashMap<Point, Node<Point>>();
    	this.width = width;
    	this.height = height;
    	for(int i = 1; i <= height; i++){
    		for(int j = 1; j <= width; j++){
    			Point p = new Point(j, i);
    			this.addNode(p);
    		}
    	}
    	this.generatePrimMaze();
    }
	public boolean addNode(Point node) {
		
		if(g.containsKey(node)){
		   return false;
		}
		Node<Point> n = new Node<Point>(node);
	    g.put(node, n);
		return true;
	}
	public boolean addEdge(Point from, Point to, int weight) {

		if(g.containsKey(from) && g.containsKey(to)){
			g.get(from).add(to, weight);
			g.get(to).add(from, weight);
			return true;
		}
		return false;
	}
	public boolean removeEdge(Point from, Point to) {
		if(!g.containsKey(from) || g.containsKey(to)){
			return false;
		}
		if(!this.hasEdge(from, to)){
			return false;
		}

		g.get(from).remove(to);
		return g.get(to).remove(from);
	}
	public boolean hasNode(Point node) {
		return g.containsKey(node);
	}

	public boolean hasEdge(Point from, Point to) {
		if(!g.containsKey(from) || !g.containsKey(to)){
			return false;
		}
		return g.get(from).contains(to);
	}
	public int getDegree(Point node) {
		return g.get(node).size();
	}
	public boolean isEmpty() {
		return g.size() == 0;
	}
	public void clear() {
		g.clear();

	}
	public List<Point> getNodes() {
		return new LinkedList<Point>(g.keySet());
	}
	public List<Point> getNeighbours(Point node) {
		return new ArrayList<Point>(g.get(node).edgeList());
	}
	public List<Point> shortestPath(Point from, Point to) {
	   	PriorityQueue<Element<Point>> open = new PriorityQueue<Element<Point>>();
    	LinkedList<Element<Point>> close = new LinkedList<Element<Point>>();
    	
    	Element<Point> head = new Element<Point>(0, from);
    	open.add(head);
    	while(!open.isEmpty()){
    		head = open.poll();
    		close.add(head);
    		if(head.getN().equals(to)){
    			break;
    		}
    		for(Point s: this.getNeighbours(head.getN())){
    			boolean add = true;
    			Element<Point> newElement = new Element<Point>(head.getF() + this.getWeight(head.getN(), s), s);
    			for(Element<Point> e: close){
    				if(newElement.getN().equals(e.getN())){
    					if(newElement.getF() < e.getF()){
    						//open.add(newElement);
    						add = true;
    						close.remove(e);
    						break;
    					} else {
    						add = false;
    						break;
    					}
    				}
    			}
    			
    			for(Element<Point> e: open){
    				if(newElement.getN().equals(e.getN())){
    					if (newElement.getF() < e.getF()){
    						add = true;
    						//e.changeG(newElement.getG());
    						open.remove(e);
    						break;
    					} else {
    						add = false;
    						break;
    					}
    				}
    			}
    			
    			if(add ==true){
    				open.add(newElement);
    			}
    		}
    	}
    	if(open.isEmpty() && !close.getLast().getN().equals(to)){
    		return null;
    	}
    	LinkedList<Point> ret = new LinkedList<Point>();
    	ret.add(close.getLast().getN());
    	double currG = close.getLast().getF();
    	for(int i = close.size() - 2; i != -1; i--){
    		if(this.hasEdge(ret.peek(), close.get(i).getN())){
    			double g = close.get(i).getF();
    			double distance = this.getWeight(close.get(i).getN(), ret.peek());
    			if(currG == g + distance){
    				ret.addFirst(close.get(i).getN());
    				currG = close.get(i).getF();
    			}
    		}
    	}
        return ret;
	}
	public boolean isConnected(Point from, Point to) {
		if(!this.hasNode(from) || !this.hasNode(to)){
			return false;
		}
		LinkedList<Point> open = new LinkedList<Point>();
		LinkedList<Point> close = new LinkedList<Point>();
		open.add(from);
		Point head;
		while(!open.isEmpty()){
			head = open.poll();
			close.add(head);
			if(head.equals(to)){
				return true;
			}
			for(Point e: this.getNeighbours(head)){
				if(!close.contains(e)){
					open.addFirst(e);
				}
			}
		}
		
		return false;
	}
	public int getWeight(Point from, Point to){
		return g.get(from).getWeight(to);
	}
	
	public int getHeight(){
		return height;
	}
	public int getWidth(){
		return width;
	}
	public void generateKuskalMaze(){
		ArrayList<Line> walls = new ArrayList<Line>();
    	for(int i = 1; i <= this.getHeight(); i++){
    		for(int j = 1; j <= this.getWidth(); j++){
    			Line wall;
    			Point p = new Point(j, i);
    			if(i <= this.getHeight()){
    				Point pUp = new Point(j, i + 1);
    				wall = new Line(p, pUp);
    				walls.add(wall);
    			}
    			if(i <= this.getWidth()){
    				Point pRight = new Point(j + 1, i);
    				wall = new Line(p, pRight);
    				walls.add(wall);
    			}
    		}
    	}
    	Random rng = new Random(); // add seed
    	int index;
    	while(!walls.isEmpty()){
    		
    		index = Math.abs(rng.nextInt()) % walls.size();
    		Line wall = walls.remove(index);
    		if(!this.isConnected(wall.getA(), wall.getB())){
    			this.addEdge(wall.getA(), wall.getB(), 1);
    		}
    	}
    }
	public void generatePrimMaze(){
		HashSet<Line> walls = new HashSet<Line>();

		Point origin = new Point(1, 1);
		walls.add(new Line(origin, new Point(2, 1)));
		walls.add(new Line(origin, new Point(1, 2)));
		Random rng = new Random();
		HashSet<Point> visited = new HashSet<Point>();
		visited.add(new Point(1, 1));
		int index;
		while(!walls.isEmpty()){
			index = Math.abs(rng.nextInt()) % walls.size();
			List<Line> temp = new LinkedList<Line>(walls);
			Line wall = temp.get(index);
			walls.remove(wall);
			if(!visited.contains(wall.getB())){
				visited.add(wall.getB());
				this.addEdge(wall.getA(), wall.getB(), 1);
				int x = (int)wall.getB().getX();
				int y = (int)wall.getB().getY();
				Point up = new Point(x + 1, y);
				if(!this.hasEdge(up, wall.getB()) && x + 1 <= this.getWidth()){
					walls.add(new Line(wall.getB(), up));
				}
				Point down = new Point(x - 1, y);
				if(!this.hasEdge(down, wall.getB()) && x - 1 > 0){
					walls.add(new Line(wall.getB(), down));
				}
				Point left = new Point(x, y + 1);
				if(!this.hasEdge(left, wall.getB()) && y + 1 <= this.getHeight()){
					walls.add(new Line(wall.getB(), left));
				}
				Point right = new Point(x, y - 1);
				if(!this.hasEdge(right, wall.getB()) && y - 1 > 0){
					walls.add(new Line(wall.getB(), right));
				}
			}
		}
	}
	public void printMaze(){
	    for(int y = 1; y != this.getHeight() + 1; y++){
	        for(int x0 = 1; x0 != this.getWidth() + 1; x0++){
	            System.out.print("0");
	            if(!this.hasEdge(new Point(x0, y), new Point(x0 + 1, y))){
	                System.out.print("#");
	            } else {
	                System.out.print("-");
	            }
	        }
	        System.out.println("");
	        for(int x1 = 1; x1 != this.getWidth() + 1; x1++){
	            if(y == this.getHeight()){
	                break;
	            }
	            if(!this.hasEdge(new Point(x1, y), new Point(x1, y+1))){
	                System.out.print("##");
	            } else {
	                System.out.print("|#");
	            }
	        }
	        System.out.println("");
	    }
	}
	private HashMap<Point, Node<Point>> g;
    private int width;
    private int height;

}
